# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile.docker.volume
# /vagrant synced_folder is a Docker volume

VAGRANTFILE_API_VERSION = "2"
ENV['VAGRANT_NO_PARALLEL'] = 'yes'
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'

HOSTNAME = "pydev"
HOST_IP_ADDRESS="192.168.56.10"
DOMAIN="virtual.ballardini.com.ar"

MY_PYTHON_VERSION="3.10.2"
PROJECT_DIR="/vagrant/my-sample-project"
CHOWN_PROJECT_DIR="yes"
# the project folder will be owned by uid/gid 1000 (those ids belongs to vagrant in the guest)

# Or you can use the vagrant user HOME directory:
#PROJECT_DIR="/home/vagrant/my-sample-project"
#CHOWN_PROJECT_DIR="no"


$msg = <<MSG
------------------------------------------------------
Python local dev environment

#{HOSTNAME} -> #{HOST_IP_ADDRESS}

------------------------------------------------------
MSG

# Activate X-11 display of process running in the container
require 'fileutils'
DISPLAY = ENV['DISPLAY']
XSOCK="/tmp/.X11-unix"
XAUTH="/tmp/.docker.xauth"
FileUtils.touch(XAUTH)
system("xauth nlist #{DISPLAY} | sed -e 's/^..../ffff/' | xauth -f #{XAUTH} nmerge -")
system("sudo chmod o+rw #{XAUTH}")


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'

  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true
  end

 config.vm.post_up_message = $msg

 config.vm.define HOSTNAME do |srv|

    srv.vm.network :private_network, ip: HOST_IP_ADDRESS
    srv.vm.synced_folder ".", "/vagrant", id: "vagrant", :mount_options => ["dmode=775", "fmode=666"]

    srv.vm.box_check_update = false
    srv.ssh.forward_agent = true
    srv.ssh.forward_x11 = true
    srv.vm.hostname = HOSTNAME
    srv.vm.boot_timeout = 600

    if Vagrant.has_plugin?("vagrant-hostmanager")
      srv.hostmanager.aliases = %W(#{HOSTNAME+"."+DOMAIN})
    end

    # Provider for Docker
    srv.vm.provider :docker do |docker, override|
      override.vm.box = nil
      docker.image = "rofrano/vagrant-provider:ubuntu"
      docker.remains_running = true
      override.ssh.insert_key = true
      docker.has_ssh = true
      docker.privileged = true
      docker.volumes = ["/sys/fs/cgroup:/sys/fs/cgroup" ]
      docker.create_args = ["--cgroupns=host", 
                            "--tmpfs=/run", 
                            "--tmpfs=/run/lock", 
                            "--volume=#{XAUTH}:#{XAUTH}:rw",
                            "--volume=#{XSOCK}:#{XSOCK}:rw",  
                            "--env", "XAUTHORITY=#{XAUTH}",
                            "--env", "DISPLAY=#{DISPLAY}"  ]

      # Uncomment to force arm64 for testing images
      #docker.create_args = ['--platform=linux/arm64']
    end
  end

    ##
    # Provisioning
    #
    config.vm.provision "fix-no-tty", type: "shell" do |s|  # http://foo-o-rama.com/vagrant--stdin-is-not-a-tty--fix.html
        s.privileged = false
        s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile\n"
    end
    config.vm.provision "ssh_pub_key", type: :shell do |s|
      begin
          ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
          s.inline = <<-SHELL
            mkdir -p /root/.ssh/
            touch /root/.ssh/authorized_keys
            echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
            echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
          SHELL
      rescue
          puts "No public keys availables on host HOME"
          s.inline = "echo OK no public keys available"
      end
    end

    config.vm.provision "update", type: "shell" do |s|
        s.privileged = false
        s.inline = <<-SHELL
          export DEBIAN_FRONTEND=noninteractive
          export APT_LISTCHANGES_FRONTEND=none
          export APT_OPTIONS=' -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold '

          # to give access to uid=1000 vagrant inside guest to file in host
          sudo -E chmod a+r #{XAUTH}

          sudo -E apt-get update -y -qq > /dev/null 2>&1
          sudo -E apt-get install apt-utils ${APT_OPTIONS} > /dev/null 2>&1
          sudo -E apt-get install debconf-utils ${APT_OPTIONS} > /dev/null 2>&1

          echo 'tzdata tzdata/Areas select America' | sudo -E debconf-set-selections
          echo 'tzdata tzdata/Zones/America select Argentina/Buenos_Aires' | sudo -E debconf-set-selections
          sudo -E rm -f /etc/timezone /etc/localtime
          sudo -E apt-get install tzdata ${APT_OPTIONS} > /dev/null 2>&1

          sudo -E apt-get --purge remove apt-listchanges -y > /dev/null 2>&1
          [ $( lsb_release -is ) != "Debian" ] && sudo -E apt-get install linux-image-generic ${APT_OPTIONS}
          sudo -E apt-get upgrade ${APT_OPTIONS} > /dev/null 2>&1
          sudo -E apt-get dist-upgrade ${APT_OPTIONS} > /dev/null 2>&1
          sudo -E apt-get autoremove -y > /dev/null 2>&1
          sudo -E apt-get autoclean -y > /dev/null 2>&1
          sudo -E apt-get clean > /dev/null 2>&1

        SHELL
    end

    config.vm.provision "xauth", type: :shell do |s|
        s.privileged = false
        s.inline = <<-SHELL
          export DEBIAN_FRONTEND=noninteractive
          export APT_LISTCHANGES_FRONTEND=none
          export APT_OPTIONS=' -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold '

          sudo apt-get install socat ${APT_OPTIONS} > /dev/null 2>&1

          echo -e "export DISPLAY=#{DISPLAY}\nexport XAUTHORITY=#{XAUTH}" > /etc/profile.d/xauth.sh

          sudo sed -i 's/^[#]*X11UseLocalhost.*/X11UseLocalhost no/' /etc/ssh/sshd_config
          sudo sed -i 's/^[#]*X11DisplayOffset.*/X11DisplayOffset 10/' /etc/ssh/sshd_config
          sudo sed -i 's/^[#]*X11Forwarding.*/X11Forwarding yes/' /etc/ssh/sshd_config
          sudo sed -i 's/^[#]*PermitUserEnvironment.*/PermitUserEnvironment yes/' /etc/ssh/sshd_config
          sudo service sshd restart

        SHELL
    end

    config.vm.provision "1_install_requirements",    type: :shell, path: "provision/1-install-requirements.sh", privileged: false
    config.vm.provision "2_install_python_tools",    type: :shell, path: "provision/2-install-python-tools.sh", privileged: false, args: [ MY_PYTHON_VERSION ]
    config.vm.provision "3_configure_sample_project",type: :shell, path: "provision/3-configure-sample-project.sh", privileged: false, args: [ MY_PYTHON_VERSION, PROJECT_DIR, CHOWN_PROJECT_DIR ]
    config.vm.provision "4_configure_python_vscode", type: :shell, path: "provision/4-configure-python-vscode.sh", privileged: false, args: [ PROJECT_DIR ]
    config.vm.provision "5_run_style_tools",         type: :shell, path: "provision/5-run-style-tools.sh", privileged: false, keep_color: true, args: [ MY_PYTHON_VERSION, PROJECT_DIR ]
    config.vm.provision "system_upgrade",            type: :shell, path: "provision/system-upgrade.sh", privileged: false, run: "never"

    config.vm.provision :reload

end

